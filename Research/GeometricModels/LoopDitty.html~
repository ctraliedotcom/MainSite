<html>

<head>
<!--External Libraries!-->
<script src="http://connect.soundcloud.com/sdk.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script src="libs/json2.js"></script>
<script type="text/javascript" src="libs/glMatrix-min.js"></script>
<script type="text/javascript" src="libs/webgl-utils.js"></script>
<script type="text/javascript" src="libs/numeric-1.2.6.min.js"></script>
<script type="text/javascript" src="libs/SCapi.js"></script>

<!--My Scripts!-->
<script src="LoopDittyGL.js"></script>
<script src="EchoNestInteractor.js"></script>
</head>

<body onload="webGLStart();">

<!--<script>
SC.initialize({
  client_id: 'b302c6dd719d6e25ac23e4c34335272c'
});

// stream track id 293
SC.stream("/tracks/6142099", function(sound){
  sound.play();
});

</script>!-->

<table>
<tr><td><h3>Audio File</h3></td><td><input type = "file" id = "audioInput"></td></tr>
<tr><td><h3>Geometric Model File</h3></td><td><input type="file" id="geomModelInput"></td></tr>
</table>





<h2><p id = "pagestatus"></p></h2>


<table><tr><td>
<table><tr><td>
<canvas id="LoopDittyGLCanvas" style="border: none;" width="800" height="600"></canvas>
</td></tr>
<tr><td bgcolor = "black">
<input type="range" id="timeSlider" min = "0" max = "1000" value = "0" step = "1" style="width:760px">
</td></tr>
</table>

<table>
<tr>
<td><button type = "button" onclick = "playAudioButton()">Play</button></td>
<td><button type = "button" onclick = "pauseAudio()">Pause</button></td>
</tr>
</table>
</td>
<td>
<h1><u>Song Information</u></h1>
<table>
<tr><td><h2><u>Variance Explained<u>:</h2></td><td><h2><div id = "varExplainedText"></div></h2></td></tr>
<tr><td><h2><u>Cluster</u> </h2></td><td><h2><div id = "centerNumText"></div></h2></td></tr>
<tr><td><h2><u>Dimension</u> </h2></td><td><h2><div id = "dimensionText"></div></h2></td></tr>
</table>
<HR>
<table>
<tr><td>Display Time Edges</td><td>
<input type="checkbox" id="timeEdgesCheckbox" />
</td>
</tr>
<tr><td>Display Scaffolding Edges</td><td>
<input type="checkbox" id="scaffoldingEdgesCheckbox"/>
</td>
</table>


</td>
</tr></table>

<script>
    var source = null;
    var analyser = null;
    var context = null;
    var buffer = null;
    var fileInput = document.getElementById('geomModelInput');
    var result = document.getElementById('text');
    
    var displayTimeEdges = true;
    var displayScaffoldingEdges = true;

    function disconnect() {
        source.stop();
        source.disconnect(0);
        analyser.disconnect(0);
    }

    function parseText(fields) {
        var varExplainedText = document.getElementById('varExplainedText');
        var v = Math.round(1000*parseFloat(fields[0]));                
        varExplainedText.innerHTML = "" + v/10 + "%";
        var NCenters = parseInt(fields[1]);
        var idx = 2;
        var i = 0;
        centers = [];
        dims = [];
        for (i = 0; i < NCenters; i++) {
            centers.push(parseInt(fields[idx]));
            idx++;
            dims.push(parseInt(fields[idx]));
            idx++;
        }
        var NEdges = parseInt(fields[idx]);
        idx++;
        edges = numeric.rep([NEdges, 2]);
        var e1, e2;
        for (i = 0; i < NEdges; i++) {
            e1 = parseInt(fields[idx]);
            idx++;
            e2 = parseInt(fields[idx]);
            idx++;
            edges[i] = [e1, e2];
        }
        var N = parseInt(fields[idx]);
        idx++;
        var X = numeric.rep([N, 5]);
        for (i = 0; i < N; i++) {
            X[i][0] = parseFloat(fields[idx]);idx++;
            X[i][1] = parseFloat(fields[idx]);idx++;
            X[i][2] = parseFloat(fields[idx]);idx++;
            X[i][3] = parseFloat(fields[idx]);idx++;
            X[i][4] = parseInt(fields[idx]);idx++;
        }
        initGLBuffers(X);
    }

    fileInput.addEventListener('change', function(e) {
        var file = fileInput.files[0];
        var textType = /text.*/;

        if (file.type.match(textType)) {
            var reader = new FileReader();
            reader.onload = function(e) {
                var fields = reader.result.split(",");
                parseText(fields);
            }
            reader.readAsText(file);
            requestAnimFrame(function(){repaint});
        } else {
            result.innerHTML = "File not supported!"
        }
    });
    
    function playAudioButton() {
        if (!playing) {
            //Prevent the user from accidentally playing multiple audio streams
            playAudio();
        }
    }
    
    function playAudio() {
        if (context === null) {
            return;
        }
        playing = true;
        console.log("Playing audio, offsetTime = " + offsetTime);
        source = context.createBufferSource();
        source.buffer = buffer;
        analyser = context.createAnalyser();
        source.connect(analyser);
        analyser.connect(context.destination);

        startTime = context.currentTime;

        //setTimeout(disconnect, source.buffer.duration * 1000 +1000);
        
        source.start(context.currentTime, offsetTime, buffer.duration - offsetTime);
        
        playIdx = 0;
        requestAnimFrame(function(){repaintWithContext(context)});
    }
    
    function pauseAudio() {
        console.log("Pausing");
        if (source === null) {
            return;
        }
        playing = false;
        source.stop();
        offsetTime = context.currentTime - startTime + offsetTime;
    }
    
    var audioInput = document.getElementById('audioInput');
    audioInput.addEventListener('change', function(e) {
        var reader = new FileReader();
        reader.onload = function(e) {
            var data = e.target.result;
            context = new (window.AudioContext || window.webkitAudioContext)();
            
            if(context.decodeAudioData) {
                context.decodeAudioData(data, function(buff) {
                buffer = buff;
                }, function(e) {
                    console.log(e);
                });
            } else {
                buffer = context.createBuffer(data, false /*mixToMono*/);
                playAudio();
            }    
        }        
        reader.readAsArrayBuffer(audioInput.files[0]);
    });
    
    var timeSlider = document.getElementById('timeSlider');
    timeSlider.addEventListener('change', function(e) {
        if (buffer === null) {
            return;
        }
        offsetTime = buffer.duration*parseFloat(timeSlider.value)/1000.0;
        playIdx = 0;
        requestAnimFrame(function(){repaintWithContext(context)});
        if (playing) {
            source.stop();
            playAudio();
        }
    });
    
    var timeEdgesCheckbox = document.getElementById('timeEdgesCheckbox');
    timeEdgesCheckbox.addEventListener('change', function(e) {
        displayTimeEdges = timeEdgesCheckbox.checked;
        requestAnimFrame(function(){repaintWithContext(context)});
    });
    timeEdgesCheckbox.checked = true;
    
    var scaffoldingEdgesCheckbox = document.getElementById('scaffoldingEdgesCheckbox');
    scaffoldingEdgesCheckbox.addEventListener('change', function(e) {
        displayScaffoldingEdges = scaffoldingEdgesCheckbox.checked;
        requestAnimFrame(function(){repaintWithContext(context)});
    });
    scaffoldingEdgesCheckbox.checked = true;
</script>


</body>
</html>
